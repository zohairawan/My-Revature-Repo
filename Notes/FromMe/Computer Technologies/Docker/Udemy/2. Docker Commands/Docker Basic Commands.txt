Docker Basic Commands
	All commands should have the word 'docker' in front of them
	Note: When running a command that involves specifying the container I.D. you can simply provide the first few characters just so it differentiates from the other container I.D.
	
	ps
		Lists all running containers
		Lists some basic information about them such as:
			container I.D.
			image(name of the image we used to run the container)
			command(we'll talk about this later)
			status
			ports(we'll talk about this later)
			names(name of container)			
		Each container automatically get a random I.D. and a name created for it by Docker
	
	ps -a
		Lists all containers, running or not
		
	images
		Lists all available images
		Lists some basic information about them such as:
			repository
			tag(we'll talk about this later)
			image I.D.
			size
			
	pull <username/repo_name> OR <image_name>
		The <username/repo_name> is used when you're pulling an image, that isn't an official repository supported by docker, that you or someone else created
		The <image_name> is used when you're pulling an image from an official repository supported by docker
			These images will have an "Official Docker Image" tag next to them on hub.docker.com
		Download an image
		This downloads an image without running it		

	run <username/repo_name> OR <image_name>
		The <username/repo_name> is used when you're running an instance of an image, that isn't an official repository supported by docker, that you or someone else created
		The <image_name> is used when you're running an instance of an image from an official repository supported by docker
			These images will have an "Official Docker Image" tag next to them on hub.docker.com
		Start a container(in attached mode)
		Used to run a container from an image
		By default it runs the latest version
		First looks for an image locally, if it can't find it it will pull the image
		Will run an instance of the application on the docker host if it already exists
		If the image is not present on the host it will go out to docker hub and pull that image down
		This is only done for the first time, for subsequent executions the same image will be reused
		Runs in the foreground or attached mode meaning you will be attached to the console or standard out of the container and you will see the output of the application on your screen
		You won't be able to do anything on this console other than view the output until this docker container stops, it won't respond to your inputs
		Press CRRL + C to stop the container and the application hosted on the container exits and you get back to your prompt
	
	run -d <image_name>
		Start a container in detached mode
		This will run the container in the background mode and you will be back to your prompt immediately
		The container will continue to run in the backend
		Run the 'ps' command to view the running container
	
	attach <container_I.D. or container_name>
		Attaches you back to a running container that you ran in detached mode
		Note: if you're specifying the container I.D. you can simply provide the first few characters just so it differentiates from the other container I.D.
	
	stop <container_I.D. or container_name>
		Stops a running container
		Must provide either the container I.D. or the container name
		If you're not sure of the container name run the 'ps' command to get a list of running containers
		On success you'll get the name of the container printed out
		Running the 'ps' command you will now see that the container you stopped has disappeared from the list
	
	start <container_I.D. or container_name>
		Start one or more stopped or exited containers
	
	rm <container_I.D. or container_name>
		Remove a container that is stopped or exited
		On success you'll get the name of the container printed out
		Run the 'ps -a' command to verify it is no longer present
	
	rmi <image_I.D. or image_name>
		Remove images
		Must ensure that no containers are running off of that image before attempting to remove the image
		Must stop and delete all dependent containers to be able to delete an image
	
	sleep 5
		Example:
			docker run ubuntu sleep 5
		This is an example of how you append a command
		The sleep command will execute for the specified duration and then the container stop and exit
	
	exec <container_I.D.> <command>
		Execute a command on a running container
		Example:
			docker exec my-container cat ps1games.txt

Docker and hosting an OS
	If you run the 'docker run ubuntu' command it runs an instance of the ubuntu image and exits immediately
	If you were to list the running container you wouldn't see the container running
	If you list all containers you will see the container in an exited state
	Why did it run for a couple seconds and then exit?
	Unlike VM's containers are not meant to host an OS
	Containers are meant to run a specific task or process such as:
		Host an instance of a web server
		Host an instance of an application server
		Host an instance of a database
		Carry some kind of computation/analysis task
	Once the task is complete the container exits
	A container only lives as long as the process inside it is alive
	For example, if the web service inside the container is stopped or crashes then the container exits
	This is why when you run a container from an Ubuntu image it stops immediately because Ubuntu is just an image of an OS that is used as the base image for other applications, there is no process running in it by default

Naming Conventions
		When running an instance of an image from an official repository supported by docker you can simply use the name directly
			docker run nginx
		When running an instance of an image, that isn't an official repository supported by docker, that you or someone else created you need to first specify the user name followed by a forward slash and the name of the repository
			baronea90/dockerhub


HOW TO RUN THE BASH SHELL IN UBUNTU IMAGE