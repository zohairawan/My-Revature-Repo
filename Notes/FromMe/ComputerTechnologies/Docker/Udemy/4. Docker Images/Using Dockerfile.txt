Running a simple web-app manually(w/o Dockerfile)
	We are going to run a simple web-app using flask
	In order to do this we will have to download some pre-req dependencies which include:
		python
		pip
		flask
	We can do this on our local machine OR we can do this on an ubuntu image
	We will chose to run an ubuntu image and run the simple-web app from there that way we don't have all the dependencies downloaded to our local machine
	
	Running an ubuntu image
		docker run -it --name udemy-simple-web-app -p 5000:5000 ubuntu
		
	Updating your package index
		apt-get update
		
	Installing python
		apt-get install -y python-is-python3
		To ensure python was properly installed run:
			python3
				You should see the python version number as well as putting you in python
				Type exit() to get out of python
		
	Installing pip
		apt-get install python3-pip
		
	Installing flask
		pip install flask
		
	Creating a folder to store the source code
		Inside the running ubuntu container type the commands in the home directory:
			mkdir zohair
			cd zohair
			mkdir simple-web-app
			cd simple-web-app
			
	Copying Source Code
		We have now downloaded all the necessary dependencies onto the ubuntu container
		We now have to add the source code to the container
		Since ubuntu images don't come with any kind of text editors we have to add it using another way
		Get the source code from https://github.com/mmumshad/simple-webapp-flask
		Copy the text inside the app.py file which is:
			import os
			from flask import Flask
			app = Flask(__name__)

			@app.route("/")
			def main():
				return "Welcome!"

			@app.route('/how are you')
			def hello():
				return 'I am good, how about you?'

			if __name__ == "__main__":
				app.run(host="0.0.0.0", port=8080)
		Go to your container and make sure you're in the container's terminal
		If you want to add text run the command:
			cat > <filename> and hit ENTER
		You will then just have a cursor blinking, this is where you can begin to start writing whatever you want
		When you are done make sure to hit ENTER
			If you don't hit ENTER and the line you're currently on has text and you CTRL+C out of there the last line of text won't be saved
		Press CTRL+C to exit out of the place where you can write text
		If you want to append additional text into the file run the command:
			cat >> <filename>
		
	Starting the web server
		Before running the following command make sure you are in the directory that contains the app.py file
		FLASK_APP=app.py flask run --host=0.0.0.0
		
	Summary
		We manually installed the dependencies and ran the application
		We did this manually first because before dockerizing this app it's good to know the steps we had to take in order for it to work
		We can type 'history' in our terminal to take a look at the steps we took
		The steps are:
			1  docker run -it --name udemy-simple-web-app -p 5000:5000 ubuntu
			2  apt-get update
			3  apt-get install -y python-is-python3
			4  apt-get install python3-pip
			5  pip install flask
			6  mkdir zohair (Optional)
			7  cd zohair/ (Optional)
			8  mkdir simple-web-app (Optional)
		    9 cd simple-web-app/ (Optional)
		   10  cat > app.py
		   11  cat app.py (Optional)
		   12  FLASK_APP=app.py flask run --host=0.0.0.0 (When you run this command make sure you're in the same directory as the app.py file - if you're not in the same directory then make sure to specify the path for app.py after FLASK_APP=)

Dockerizing the app
	Instead of going through the setup manually we now want it automated
	Dockerizing the app will accomplish this
	In order to Dockerize it the first thing we want to do is to create a Dockerfile
		The Dockerfile will contain the set of instructions used to build the image
		The resulting image will be our app
		We can then run the image as a container and that container will perform the same function as the container we setup manually
		
	Creating a Dockerfile
		We will be creating and dockerizing this app on our local machine
		Decide where you want to Dockerize it on your local machine
			C:\Users\Zohair\IdeaProjects\Revature\Notes\FromMe\ComputerTechnologies\Docker\Udemy\4. Docker Images\simple-flask-webapp-demo
		
		Create the Dockerfile in the directory that you decided you want to Dockerize it in
			The following is for linux, if you have windows the 'cat' command won't work
			You should open notepad and paste it in there
			
			cat > Dockerfile
			FROM ubuntu
			
			RUN apt-get update
			RUN apt-get install -y python-is-python3 python3-pip
			RUN pip install flask
			
			COPY app.py /zohair/dockerized-simple-webapp/app.py
				This assumes that you have your source code(app.py) in your local directory so make sure that you have it

			ENTRYPOINT [FLASK_APP=/zohair/dockerized-simple-webapp/app.py flask run --host=0.0.0.0]
			
		Running the app
			Go to your terminal and type
				docker run --name <container_name> -p <host_port:container_port> <image_name>
				
Pushing your image to the Docker repo
	You should first tag your image before pushing it to the Docker repo
	This is because if you haven't specified an account in your image name it will push to the default account which is library
	
	Tagging your image
		If you've already built your image without your account name present in the image then you will need to rebuild your image, this time with your account name in it
			docker build -t zohair89/udemy-dockerized-webapp .
			
		If you don't want to rebuild your image you can just tag it as follows
			docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
			Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
				SOURCE_IMAGE would be the name of the image you have without your account name present
				TARGET_IMAGE would be the image you type with the account name present and this name must match with the name of the repo you've created on your Docker hub
				
	Pushing your image to the Docker repo
		You must first name your local image using your Docker Hub username and the repository name that you created through Docker Hub on the web
		Also make sure you've logged into your Docker account in the cmd prompt app by typing:
			docker login
		Now you can push your image by typing:
			docker push [OPTIONS] NAME[:TAG]