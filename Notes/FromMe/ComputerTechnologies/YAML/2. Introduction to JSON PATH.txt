Objectives
	YAML
	YAML vs JSON
	JSON PATH
		Dictionaries
		Lists
		Lists and Dictionaries
		Criteria
	Practice Exercise
	
YAML
	Used to represent data in a structured format

YAML vs JSON
	They are very similar
	While YAML uses indentation to organize data into lists and dictionaries JSON uses [] or {}
	A set of properties defined with the same indentation form a dictionary in YAML whereas it is everything within a pair of {} in JSON
	For example:
		YAML
			car:
				color: blue
				price: 20000
				
		JSON
			{
				"car": {
					"color": "blue",
					"price": "20000"
				}
			}
			
	While in YAML we use a - to denote an item in a list, in JOSN we use [] to define a list and each item within the list is seperated by a ,
	For example:
		YAML
			car:
				color: blue
				price: 20000
				wheels:
					-	model: X345ERT
						location: front-right
					-	model: X345ERT
						location: front-left
					-	model: X345ERT
						location: rear-right
					-	model: X345ERT
						location: rear-left
						
		JSON
			{
				"car": {
					"color": "blue",
					"price": "20000",
					"wheels": [
						{
							"model": "X345ERT",
							"location": "front-right"
						},
						{
							"model": "X345ERT",
							"location": "front-left"
						},
						{
							"model": "X345ERT",
							"location": "rear-right"
						},
						{
							"model": "X345ERT",
							"location": "rear-left"
						}
					]
				}
			}
	You can easily convert data from one to the other using online coverters
		JSON ---> YAML https://www.json2yaml.com/
		YAML ---> JSON https://www.json2yaml.com/
			This website allows you to convert either
			
JSON PATH
	A query language that can help you parse data represented in JSON/YAML format
	The same way you can use SQL to run queries
	For example:
		Cars Table
		Car		Color	  Price		Year
		1		Blue	  $20,000	1987
		2		Red		  $22,000	1988
		3		Yellow	  $18,000	1989
		
		Get color and price of cars
		SELECT color,price FROM cars;
			Color	  Price
			Blue	  $20,000
			Red		  $22,000
			Yellow	  $18,000
		
		Get blue car details
		SELECT * FROM cars
		WHERE color is "Blue";
			1		Blue	  $20,000	1987
		
		Get price of the blue car
		SELECT price FROM cars
		WHERE color is "Blue";
			$20,000
			
	For any given data you apply a query and you get a result which is a subset of that data
	
$ Root Element
	In the JSON world JSON PATH is a query language that when applied to a given JSON data set gets you results that are subsets of that data
	For example:
		{
			"car": {
				"color": "blue",
				"price": "$20,000"
			},
			"bus": {
				"color": "white",
				"price": "$120,000"
			}
		}
		
		Get car details
		$.car
			[
				{
					"color": "blue",
					"price": "$20,000"
				}
			]
			
		Get bus details
		$.bus
			[
				{
					"price": "$120,000"
					"color": "white",
				}
			]
		
		Get car's color
		$.car.color
			[
				"blue"
			]
		
		Get bus price
		$.bus.price
			[
				"$120,000"
			]
	
	The $ denotes the root element
	As we said earlier anything within {} is a dictionary
	So 'car' and 'bus' are two properties of a dictionary or two dictionaries within a dictionary 
	A query created for a JSON document with a dictionary at its root should start with a $
	The . notation helps you select a particular field within a dictionary
	
JSON PATH - Dictionaries/Maps
	Let's suppose the car and bus are encapsulated within a dictionary named vehicles
		{
			"vehicles": {
				"car": {
					"color": "blue",
					"price": "$20,000"
				},
				"bus": {
					"color": "white",
					"price": "$120,000"
				}
			}
		}
		
		Get car details
		$.vehicles.car
			{
				"color": "blue",
				"price": "$20,000"
			}
		
		Get bus details
		$.vehicles.bus
			{
				"color": "white",
				"price": "$120,000"
			}
		
		Get car's color
		$.vehicles.car.color
			[
				"blue"
			]
		
		Get bus price
		$.vehicles.bus.price
			[
				"$120,000"
			]

JSON PATH - Arrays/Lists
	[
		"car",
		"bus",
		"truck",
		"bike"
	]
	As you can see there are no {} so there are no dictionaries, this is a simple list of vehicles
	The root element is an array as denoted by the []
	How do we get the first element in this list?
	To get a particular element from a list use the [] in your query and specify the position of the element you want
	For example:
		[
			"car",
			"bus",
			"truck",
			"bike"
		]
		
		Get the 1st element
		$[0]
			["car"]
		Remember to start with the $ for the root element
		
		Get the 4th element
		$[3]
			["bike"]
			
		Get the 1st and the 4th element
		$[0,3]
			["car", "bike"]
			
JSON PATH - Dictionaries & Lists
	{
		"car": {
			"color": "blue",
			"price": "20000",
			"wheels": [
				{
					"model": "X345ERT",
					"location": "front-right"
				},
				{
					"model": "X345ERT",
					"location": "front-left"
				},
				{
					"model": "X345ERT",
					"location": "rear-right"
				},
				{
					"model": "X345ERT",
					"location": "rear-left"
				}
			]
		}
	}
		Here we have data of a car
		It's properties are color,price,and wheels
		Wheels is a list that has four items in it, each one being a dictionary
		
		Get the model of the 2nd wheel
		$.car.wheels[1].model
		
		Our query starts with a $ for the root element
		The root element is a dictionary denoted by the {}
		Because it's a dictionary we know our query has to have a . following the $
		Withing the root dictionary we have the car dictionary
		Within the car we have wheels so that's next
		To specify the second item within the array we use the [] followed by its postion
			Note that we didn't use the . here because wheels is not a dictionary, it's an array
		If we just leave it as $.car.wheels[1] this will give us the model and location information but we don't want all that, we just want the model
		Because these details are a dictionary we can use the . notation again and add model
		
JSON PATH - Criteria
	Lets look at applying some basic conditions or criteria to our query
	Criteria helps to filter our query based on a condition
	For example:
		[
			12,
			34,
			46,
			1,
			76,
			47,
			99,
			10,
			89
		]
		Suppose we want to get all numbers > 40
		
		Get all numbers > than 40
		$[]
		
		We start with the $ symbol for root element
		Since the root element is an array we use []
		Inside the [] we want to define our criteria
			$[Check if each item in the array > 40]
			You can replace Check if ---> ?()
			$[?()]
				This is used to specify a criteria or filter
				
		Now we have
			$[?(each item in the array > 40)]
			each item in the array ---> @
			$[?(@ > 40)]
				The @ symbol in a criteria means each item in the array
				
		Other operators include:
			== (@ == 40)
			!= )@ != 40)
			@ in [] (@ in [40,43,45])
				This will return all the numbers that are either 40,43,45
			@ nin [] (@ nin [40,43,45]
				This will not return all the numbers that are either 40,43,45
				
	Lets look at the previous car example
	Find the model of the rear-right wheel
		$.car.wheels[?(@.location == "rear-right")].model
		X345ERT