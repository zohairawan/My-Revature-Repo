*****YAML/YML*****
Stands for Yet Another Markup Language
In project1 we have a file called application.properties that stores information regarding our database
It's a configuration file for your application
We can store this same information in another file called application.yaml
	The only difference is the way in which it is arranged
	Yaml files follow a strict spacing/indentation rule
	Deals with parent/child/sibling relation to determine indentation
	The benefit is that you don't have to rewrite alot of stuff
	For example:
		In application.properties:
			server.port=8084
			spring.datasource.driver-class-name=org.postgresql.Driver
			spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
			spring.datasource.schema=postgres
			spring.datasource.username=postgres
			spring.datasource.password=root
		In application.yaml:
			spring:
			  datasource:
				driver-class-name: org.postgresql.Driver
				url: jdbc:postgresql://localhost:5432/postgres
				username: postgres
				password: rootroot
			  jpa:
			    properties:
			     hibernate:
				  dialect: org.hibernate.dialect.PostgreSQLDialect
				  format_sql: true
			    generate-ddl: true
NOTE: Everything underneath datasource is considered to be a child of datasource(parent) and anything that is flush is considered to be siblings
If you have both files present in your application it will choose application.properties by default.

*****NSSM*****
Stands for Non-Sucking Service Manager
Utility that manages background and foreground services and processes
Run it through the CLI
	nssm start <service>
	nssm stop <service>
	nssm remove <service>
	nssm restart <service>
	nssm install <nameYouWantToGiveService>
	nssm edit <nameYouGaveToService>
We will be using it to run our apps like:
	loki
	promtail
	prometheus

*****HOW DOES GRAFANA LOKI WORK*****
Loki will display the logs but you need a collector which is responsible for collecting the logs from different sources to give to loki so it can display it in Grafana
So who is the collector?
	Promtail - a collector specifically for Grafana
So the flowchars is:
	Pull in any logs with promtail -> Store the logs in loki -> display visualized charts in Grafana
Features of Grafana loki include:
	Alert on your logs
		Set up alerting for loki to evaluate you incoming log data
		Configure loki to send teh resulting alerts to a Prometheus Alertmanager so they can get routed to the right team

*****RUNNING A SERVICE WITH NSSM / INSTALLING LOKI*****
Be sure to add nssm to your PATH
Open CMD with Admin privelages
For example:
	nssm install loki (the name can be anything you want but since we are installing loki it makes sense to name it that)
	This will give you a pop up where you will:
		add loki-windows-amd64 ti "Application Path"
		add the -config.file loki-local-config.yaml to "Arguments"
			NOTE: -config.file must be typed before putting the config file in

*****ACCESSING GRAFANA VIA WEB*****
localhost:3000

*****LOKI*****
Tool that is a log aggregation system designed to store and query logs from all your applications and infrastructure
Like Prometheus but for logs
Used in conjunction with Grafana it takes the data and represents it in a graphical way

*****CONNECTING LOKI TO GRAFANA*****
Before starting the loki service (nssm start loki) go to Grafana website (localhost:3000)
Configuration > Data Source > Add Data Source > Loki > Give it a name > set the URL (we gave it http://127.0.0.1:3100 - this is IP address of a local system) > Save and Test (loki must be running when you save and test)
	The reason we gave it 3100 is because that's what we specified in the configuration file
It won't get connected yet because we've only installed it but not started it yet with nssm
Go to CMD with Admin privelages and type:
	nssm start loki
Now when you click on Save and Test it will say "Data source connected and tables found"
Grafana is now successfully integrated with loki

*****CHECKING METRICS WITH LOKI*****
Open your browser
Type localhost: and the last four numbers in the URL you set for loki (in our case 3100) /metrics
	localhost:3100/metrics
The metrics you'll be seeing are that of loki
If you want to change the listening port (3100) you can do so in the configuration file, just be sure to restart the loki service (nssm restart loki) to reflect the changes
I'm guessing you would also have the change the URL you set for loki as well in Grafana website

*****EXPLORING LOKI*****
From the Grafana website:
	Explore > Select Loki
You'll notice it says "No Logs Found"
	That's what we expected because it doesn't collect any data itself, it's an aggregation tool
	We need a collector to give us data
	
*****WHAT COLLECTOR WILL GIVE LOKI LOGS*****
Promtail

*****ACCESSING LOKI VIA WEB*****
http://localhost:3100/metrics		(The port numbers may change depending on what you specified in your configuration file I think)

*****PROMTAIL*****
An agent which ships the contents of a local log to a private Grafana loki instance
Usually deployed to every machine that has applications needed to be monitored
Promtail will ship the data to loki
It primarily:
	Discovers targets
	Attaches labels to log streams
Currently it can tail logs from two sources:
	local log files
	systemd journal(on AMD64 machines only)
	pushes logs to loki instance
Can also be run on AWS EC2 instances

*****INSTALLING/CONFIGURING PROMTAIL*****
Install with nssm like we did for loki
Configuring the yaml file:
	Open VS Code
	File > New Text File > ctrl + s > save it in same folder as promtail exe (promtail-windows-amd64) > name it "promtail-local-config.yaml" (include "") > save it
	#This is promtail-local-config.yaml 
	server:															(This is where promtail will be running on)
	  http_listen_port: 9080
	  grpc_listen_port: 0

	positions:
	  filename: /tmp/positions.yaml

	clients:
	  - url: http://localhost:3100/loki/api/v1/push		(Our client is loki, 3100 is the http_listen_port we specified in the loki config file, this exposes a URL to which promtail can push logs to)

	scrape_configs:										
	- job_name: system
	  static_configs:
	  - targets:
		  - localhost
		labels:
		  job: test
		  agent: promtail
		  __path__: C:/Program Files/GrafanaLokiNssm/promtail/test/*	(This specifies where our logs are. Promtail will push these logs to loki automatically, the log file is located in the test folder so the * says get everything inside the test folder)

*****GETTING PROMTAIL TO PUSH LOGS*****
Start promtail with nssm (nssm start promtail)
If you have your configuration file set up correctly then when you start promtail it will push the logs to Grafana

*****ACCESSING PROMTAIL VIA WEB*****
localhost:9080		(The port numbers may change depending on what you specified in your configuration file I think)

*****PROMETHEUS*****
Systems monitoring and alerting toolkit
Prometheus "scrapes" metrics from other sources at configured intervals
Default path that Prometheus looks for is /metrics unlessed configured otherwise
Unlike Grafana Prometheus has a built in database to store data

*****USE CASE*****
Let's say you want to see how many types of http requests(GET,POST,etc...) have been made, you can target that
	Do this by typing http_requests_total(method="get")
	(http_requests_total is metric name, method is key, and get is value)

*****HOW TO USE PROMETHEUS*****
After downloading you have the option of just double clicking on the exe file or using it with nssm
It will come with a pre-configured Yaml file so no need to create your own
If you install using nssm you just have to add the executable file, no need to add the config file in the pop up window
After launching it will you will get some information on the command prompt letting you know it started
Navigate to the prometheus UI webpage(see below we URL)
On the home page you can execute commands

*****SOME PROMETHEUS COMMANDS*****
Useful feature of Prometheus UI is that it suggests and autocompletes your requests
up - shows you which instance is running and what is its job
prometheus_api_remote_read_queries - current number of remote read queries being executed or waiting
prometheus_http_requests_total - counter of http requests

*****CONNECTING PROMETHEUS TO GRAFANA*****
Configuration > Data Source > Add Data Source > Prometheus > Give it a name > set the URL (we gave it http://127.0.0.1:9090) > Save and Test (prometheus must be running when you save and test)

*****EXPLORING PROMETHEUS*****
From the Grafana website:
	Explore > Metrics browser
	You can click on instance to see which instance has been exposed
	You can also select a metric from here to get a graphical/table representation of it
	There's many other things you can look at too

*****LOKI VS PROMETHEUS*****
Loki is all about reading log files only
Prometheus is geared more towards reading metrics/numbers
Loki relies on promtail for getting(collecting) the data
Prometheus requests (pulls) the data from node exporter
Grafana allows you to integrate both loki and prometheus

*****ACCESSING PROMETHEUS VIA WEB*****
localhost:9090		(The port numbers may change depending on what you specified in your configuration file I think)