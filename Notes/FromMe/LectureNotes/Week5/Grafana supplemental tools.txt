*****YAML/YML*****
Stands for Yet Another Markup Language
In project1 we have a file called application.properties that stores information regarding our database
It's a configuration file for your application
We can store this same information in another file called application.yaml
	The only difference is the way in which it is arranged
	Yaml files follow a strict spacing/indentation rule
	Deals with parent/child/sibling relation to determine indentation
	The benefit is that you don't have to rewrite alot of stuff
	For example:
		In application.properties:
			server.port=8084
			spring.datasource.driver-class-name=org.postgresql.Driver
			spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
			spring.datasource.schema=postgres
			spring.datasource.username=postgres
			spring.datasource.password=root
		In application.yaml:
			spring:
			  datasource:
				driver-class-name: org.postgresql.Driver
				url: jdbc:postgresql://localhost:5432/postgres
				username: postgres
				password: rootroot
			  jpa:
			    properties:
			     hibernate:
				  dialect: org.hibernate.dialect.PostgreSQLDialect
				  format_sql: true
			    generate-ddl: true
NOTE: Everything underneath datasource is considered to be a child of datasource(parent) and anything that is flush is considered to be siblings
If you have both files present in your application it will choose application.properties by default.

*****NSSM*****
Stands for Non-Sucking Service Manager
Utility that manages background and foreground services and processes
Run it through the CLI
	nssm start <service>
	nssm stop <service>
	nssm remove <service>
	nssm restart <service>
	nssm install <nameYouWantToGiveService>
	nssm edit <nameYouGaveToService>
We will be using it to run our apps like:
	loki
	promtail
	prometheus

*****HOW DOES GRAFANA LOKI WORK*****
Loki will display the logs but you need a collector which is responsible for collecting the logs from different sources to give to loki so it can display it in Grafana
So who is the collector?
	Promtail - a collector specifically for Grafana
So the flowchars is:
	Pull in any logs with promtail -> Store the logs in loki -> display visualized charts in Grafana
Features of Grafana loki include:
	Alert on your logs
		Set up alerting for loki to evaluate you incoming log data
		Configure loki to send teh resulting alerts to a Prometheus Alertmanager so they can get routed to the right team

*****RUNNING A SERVICE WITH NSSM / INSTALLING LOKI*****
Be sure to add nssm to your PATH
Open CMD with Admin privelages
For example:
	nssm install loki (the name can be anything you want but since we are installing loki it makes sense to name it that)
	This will give you a pop up where you will:
		add loki-windows-amd64 ti "Application Path"
		add the -config.file loki-local-config.yaml to "Arguments"
			NOTE: -config.file must be typed before putting the config file in

*****LOKI*****
Tool that is a log aggregation system designed to store and query logs from all your applications and infrastructure
Like Prometheus but for logs
Used in conjunction with Grafana it takes the data and represents it in a graphical way

*****CONNECTING GRAFANA TO LOKI*****
Before starting the loki service (nssm start loki) go to Grafana website (localhost:3000)
Configuration > Data Source > Add Data Source > Loki > Give it a name > set the URL (we gave it http://127.0.0.1:3100 - this is IP address of a local system) > Save and Test
	The reason we gave it 3100 is because that's what we specified in the configuration file
It won't get connected yet because we've only installed it but not started it yet with nssm
Go to CMD with Admin privelages and type:
	nssm start loki
Now when you click on Save and Test it will say "Data source connected and tables found"
Grafana is now successfully integrated with loki

*****CHECKING METRICS WITH LOKI*****
Open your browser
Type localhost: and the last four numbers in the URL you set for loki (in our case 3100) /metrics
	localhost:3100/metrics
The metrics you'll be seeing are that of loki
If you want to change the listening port (3100) you can do so in the configuration file, just be sure to restart the loki service (nssm restart loki) to reflect the changes
I'm guessing you would also have the change the URL you set for loki as well in Grafana website

*****EXPLORING LOKI*****
From the Grafana website:
	Explore > Select Loki
You'll notice it says "No Logs Found"
	That's what we expected because it doesn't collect any data itself, it's an aggregation tool
	We need a collector to give us data
	
*****WHAT COLLECTOR WILL GIVE LOKI LOGS*****
Promtail

*****PROMTAIL*****
An agent which ships the contents of a local log to a private Grafana loki instance
Usually deployed to every machine that has applications needed to be monitored
Promtail will ship the data to loki
It primarily:
	Discovers targets
	Attaches labels to log streams
Currently it can tail logs from two sources:
	local log files
	systemd journal(on AMD64 machines only)
	pushes logs to loki instance
Can also be run on AWS EC2 instances

*****INSTALLING/CONFIGURING PROMTAIL*****
Install with nssm like we did for loki
Configuring the yaml file:
	Open VS Code
	File > New Text File > ctrl + s > save it in same folder as promtail exe (promtail-windows-amd64) > name it "promtail-local-config.yaml" (include "") > save it
	#This is promtail-local-config.yaml 
	server:															(This is where promtail will be running on)
	  http_listen_port: 9080
	  grpc_listen_port: 0

	positions:
	  filename: /tmp/positions.yaml

	clients:
	  - url: http://localhost:3100/loki/api/v1/push		(Our client is loki, 3100 is the http_listen_port we specified in the loki config file, this exposes a URL to which promtail can push logs to)

	scrape_configs:										
	- job_name: system
	  static_configs:
	  - targets:
		  - localhost
		labels:
		  job: test
		  agent: promtail
		  __path__: C:/Program Files/GrafanaLokiNssm/promtail/test/*	(This specifies where our logs are. Promtail will push these logs to loki automatically, the log file is located in the test folder so the * says get everything inside the test folder)

*****GETTING PROMTAIL TO PUSH LOGS*****
Start promtail with nssm (nssm start promtail)