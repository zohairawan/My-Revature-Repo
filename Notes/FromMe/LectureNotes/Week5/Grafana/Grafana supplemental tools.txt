*****YAML/YML*****
Stands for Yet Another Markup Language
In project1 we have a file called application.properties that stores information regarding our database
It's a configuration file for your application
We can store this same information in another file called application.yaml
	The only difference is the way in which it is arranged
	Yaml files follow a strict spacing/indentation rule
	Deals with parent/child/sibling relation to determine indentation
	The benefit is that you don't have to rewrite alot of stuff
	For example:
		In application.properties:
			server.port=8084
			spring.datasource.driver-class-name=org.postgresql.Driver
			spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
			spring.datasource.schema=postgres
			spring.datasource.username=postgres
			spring.datasource.password=root
		In application.yaml:
			spring:
			  datasource:
				driver-class-name: org.postgresql.Driver
				url: jdbc:postgresql://localhost:5432/postgres
				username: postgres
				password: rootroot
			  jpa:
			    properties:
			     hibernate:
				  dialect: org.hibernate.dialect.PostgreSQLDialect
				  format_sql: true
			    generate-ddl: true
NOTE: Everything underneath datasource is considered to be a child of datasource(parent) and anything that is flush is considered to be siblings
If you have both files present in your application it will choose application.properties by default.

*****NSSM*****
Stands for Non-Sucking Service Manager
Utility that manages background and foreground services and processes
Run it through the CLI
	nssm start <service>
	nssm stop <service>
	nssm remove <service>
	nssm restart <service>
	nssm install <nameYouWantToGiveService>
	nssm edit <nameYouGaveToService>
We will be using it to run our apps like:
	loki
	promtail
	prometheus

*****HOW DOES GRAFANA LOKI WORK*****
Loki will display the logs but you need a collector which is responsible for collecting the logs from different sources to give to loki so it can display it in Grafana
So who is the collector?
	Promtail - a collector specifically for Grafana
So the flowchart is:
	Pull in any logs with promtail -> Store the logs in loki -> display visualized charts in Grafana
Features of Grafana loki include:
	Alert on your logs
		Set up alerting for loki to evaluate you incoming log data
		Configure loki to send the resulting alerts to a Prometheus Alertmanager so they can get routed to the right team

*****RUNNING A SERVICE WITH NSSM / INSTALLING LOKI*****
Be sure to add nssm to your PATH
Open CMD with Admin privelages
For example:
	nssm install loki (the name can be anything you want but since we are installing loki it makes sense to name it that)
	This will give you a pop up where you will:
		add loki-windows-amd64 ti "Application Path"
		add the -config.file loki-local-config.yaml to "Arguments"
			NOTE: -config.file must be typed before putting the config file in

*****ACCESSING GRAFANA VIA WEB*****
localhost:3000

*****LOKI*****
Tool that is a log aggregation system designed to store and query logs from all your applications and infrastructure
Like Prometheus but for logs
Used in conjunction with Grafana it takes the data and represents it in a graphical way

*****CONNECTING LOKI TO GRAFANA*****
Before starting the loki service (nssm start loki) go to Grafana website (localhost:3000)
Configuration > Data Source > Add Data Source > Loki > Give it a name > set the URL (we gave it http://127.0.0.1:3100 - this is IP address of a local system) > Save and Test (loki must be running when you save and test)
	The reason we gave it 3100 is because that's what we specified in the configuration file
It won't get connected yet because we've only installed it but not started it yet with nssm
Go to CMD with Admin privelages and type:
	nssm start loki
Now when you click on Save and Test it will say "Data source connected and tables found"
Grafana is now successfully integrated with loki

*****CHECKING METRICS WITH LOKI*****
Open your browser
Type localhost: and the last four numbers in the URL you set for loki (in our case 3100) /metrics
	localhost:3100/metrics
The metrics you'll be seeing are that of loki
If you want to change the listening port (3100) you can do so in the configuration file, just be sure to restart the loki service (nssm restart loki) to reflect the changes
I'm guessing you would also have the change the URL you set for loki as well in Grafana website

*****EXPLORING LOKI*****
From the Grafana website:
	Explore > Select Loki
You'll notice it says "No Logs Found"
	That's what we expected because it doesn't collect any data itself, it's an aggregation tool
	We need a collector to give us data
	
*****WHAT COLLECTOR WILL GIVE LOKI LOGS*****
Promtail

*****ACCESSING LOKI VIA WEB*****
http://localhost:3100/metrics		(The port numbers may change depending on what you specified in your configuration file I think)

*****PROMTAIL*****
An agent which ships the contents of a local log to a private Grafana loki instance
Usually deployed to every machine that has applications needed to be monitored
Promtail will ship the data to loki
It primarily:
	Discovers targets
	Attaches labels to log streams
Currently it can tail logs from two sources:
	local log files
	systemd journal(on AMD64 machines only)
	pushes logs to loki instance
Can also be run on AWS EC2 instances

*****INSTALLING/CONFIGURING PROMTAIL*****
Install with nssm like we did for loki
Configuring the yaml file:
	Open VS Code
	File > New Text File > ctrl + s > save it in same folder as promtail exe (promtail-windows-amd64) > name it "promtail-local-config.yaml" (include "") > save it
	#This is promtail-local-config.yaml 
	server:															(This is where promtail will be running on)
	  http_listen_port: 9080
	  grpc_listen_port: 0

	positions:
	  filename: /tmp/positions.yaml

	clients:
	  - url: http://localhost:3100/loki/api/v1/push		(Our client is loki, 3100 is the http_listen_port we specified in the loki config file, this exposes a URL to which promtail can push logs to)

	scrape_configs:										
	- job_name: system
	  static_configs:
	  - targets:
		  - localhost
		labels:
		  job: test
		  agent: promtail
		  __path__: C:/Program Files/GrafanaLokiNssm/promtail/test/*	(This specifies where our logs are. Promtail will push these logs to loki automatically, the log file is located in the test folder so the * says get everything inside the test folder)

*****GETTING PROMTAIL TO PUSH LOGS*****
Start promtail with nssm (nssm start promtail)
If you have your configuration file set up correctly then when you start promtail it will push the logs to Grafana

*****ACCESSING PROMTAIL VIA WEB*****
localhost:9080		(The port numbers may change depending on what you specified in your configuration file I think)

*****PROMETHEUS*****
Systems monitoring and alerting toolkit
Prometheus "scrapes" metrics from other sources at configured intervals
Default path that Prometheus looks for is /metrics unlessed configured otherwise
Unlike Grafana Prometheus has a built in database to store data

*****USE CASE*****
Let's say you want to see how many types of http requests(GET,POST,etc...) have been made, you can target that
	Do this by typing http_requests_total(method="get")
	(http_requests_total is metric name, method is key, and get is value)

*****HOW TO USE PROMETHEUS*****
After downloading you have the option of just double clicking on the exe file or using it with nssm
It will come with a pre-configured Yaml file so no need to create your own
If you install using nssm you just have to add the executable file, no need to add the config file in the pop up window
After launching it will you will get some information on the command prompt letting you know it started
Navigate to the prometheus UI webpage(see below we URL)
On the home page you can execute commands

*****SOME PROMETHEUS COMMANDS*****
Useful feature of Prometheus UI is that it suggests and autocompletes your requests
up - shows you which instance is running and what is its job
prometheus_api_remote_read_queries - current number of remote read queries being executed or waiting
prometheus_http_requests_total - counter of http requests

*****CONNECTING PROMETHEUS TO GRAFANA*****
Configuration > Data Source > Add Data Source > Prometheus > Give it a name > set the URL (we gave it http://127.0.0.1:9090) > Save and Test (prometheus must be running when you save and test)

*****EXPLORING PROMETHEUS*****
From the Grafana website:
	Explore > Metrics browser
	You can click on instance to see which instance has been exposed
	You can also select a metric from here and click Use query to get a graphical/table representation of it
	There's many other things you can look at too

*****IMPORTING A DASHBOARD*****
Configuration > Data source > Prometheus > Dashboards

*****VIEWING A DASHBOARD*****
After importing a dashboard:
	Dashboard > Browse > Select dashboard you want to view

*****LOKI VS PROMETHEUS*****
Loki is all about reading log files only
Prometheus is geared more towards reading metrics/numbers
Loki relies on promtail for getting(collecting) the data
Prometheus requests (pulls) the data from node exporter
Grafana allows you to integrate both loki and prometheus

*****HOW TO ADD METRICS*****
We are going to add a job that monitors a windows machine(RAM size, memory, etc...)
Steps:
1.) Download the wmi
2.) Configure the prometheus.yaml
3.) Restart prometheus

To check that windows exporter has been successfully installed go to:
	localhost:9182 and localhost:9182/metrics

Open the prometheus.yaml file
	If you want to create a job you can copy and paste everything underneath scrape configs:
		- job_name: "wmi_exporter"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

		  static_configs:
			- targets: ["localhost:9182"]
	We defined the port number as 9182 because that's the port that windows exporter runs on(as seen above)
	Once you've made the changes save the .yaml file
	Restart prometheus
	Now when you go to the prometheus UI and restart it you should see the name of the job you just created when you run the 'up' command
	Because of the job you added new metrics have been added to the prometheus UI
	For example if you type windows_logical_disk_free_bytes that metric came from windows exporter
	The query(windows_logical_disk_free_bytes) that you executed is PromQL

*****PROMQL IN PROMETHEUS*****
Prometheus supports PromQL(Prometheus Query Language) that allows highly customized queries to select metrics to visualize
Has 4 primary data types:
	Instant Vectors
	Range Vectors
	Scalars
	Strings -very rarely used
Has 4 metric types:
	Gauge
	Summary
	Counter
	Histogram

If we type in the query prometheus_http_requests_total this is an example of Instant Vectors
If we type in the query prometheus_http_requests_total[1m] this is an example of Range Vectors

*****ACCESSING WINDOWS EXPORTER VIA WEB*****
localhost:9182 and localhost:9182/metrics

*****ALERT MANAGER IN PROMETHEUS*****
Currently we have Prometheus set up to where we have to go to the UI and type in the metric we want to check for
This is cumbersome
We want to set it up where there are specific metrics we are monitoring and we want alerts when those metrics fall out of our desired threshold
To achieve this we should set up alerts that come to our email
Steps:
1.) Create Rules that will fire alerts
		Go to where your prometheus folder is(same one where your prometheus-config.yaml file is)
		Create a folder and give it a name(I called it rules)
2.) Create a file inside the folder
		Inside the folder create a new file and name it whatever you want(I called it myRules1.yml although you might want to think of a name that's specific to the rule your making)
			Be sure to make a yml file
		This is a good resource for getting rules: https://awesome-prometheus-alerts.grep.to/rules.html (The spacing might be off when you copy it but just refer to myRules1 for spacing and get the jobs from this website)
		Example:
			groups:
			  - name: custom_rules
				rules:
				  - alert: DiskSpaceFree10Percent
					expr: node_filesystem_avail_bytes{mountpoint="/", fstype="xfs"} <= 6519140359
					labels:
					  severity: warning
					annotations:
					  summary: "Instance [{{ $labels.instance }}] has 10% or less free disk space"
					  description: "[{{ $labels.instance }}] has only {{ $value }}% or less free"
3.) Make changes in prometheus-config.yaml file
		# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
		rule_files:
		  - "rules/myRules1.yml"
		  # - "second_rules.yml"
4.) Save your yaml/yml files and Restart your prometheus with nssm restart
5.) Go to prometheus UI and go to Alerts, your alert should show up there

*****ALERT MANAGER*****
Now we want to send these notifications to our email:
Prometheus is responsible for generating the alerts but sending them to your email or slack is done by Alert Manager
Steps:
1.) Download Alert Manager
2.) Install with nssm, no need to add the config file in the pop-up window, it already comes with one created
Right now the issue is there's no link between alert manager and prometheus

*****LINKING ALERT MANAGERS WITH PROMETHEUS*****
We want prometheus to send any alerts to alert manager and we want alert manager to send those to our email/slack
We need to link alert manager and prometheus in order for that to happen
Steps:
1.) Put this in prometheus-config.yaml file
		# Alertmanager configuration
		alerting:
		  alertmanagers:
			- static_configs:
				- targets:
				  - localhost:9093 (we changed this line from alertmanager to localhost)
By making this change you have now linked up prometheus and alert manager

*****FIRING EMAIL ALERT*****
You're going to need two emails:
	One to send the alert 'from' and one 'to' send it to
	We will have to make some changes in the setting for our from email account(SMTP enabled as well as some other stuff we will look at)
	You will also need to make some changes in the alert manager yml file

Generating SMTP password:
Enabling 2-Step verification
Steps:
1.) Go to your 'from' email id
	Go to manage your google account > Security > 2-Step Verification > Get Started > Type in phone number > Text Message > Enter code that was sent through text > Turn On
2.) Go to manage your google account > Security > App passwords > Select App > Other(custom name) > Prometheus(name can be anything) > Generate > Copy password > Go to alertmanager.yml file and paste it in auth_password:
3.) Properly configure that alertmanager.yml file:
	route:
	  receiver: admin

	receivers:
	- name: admin
	  email_configs:
	  - to: ''
		from: ''
		smarthost: smtp.gmail.com:587
		auth_username: ''
		auth_identity: ''
		auth_password: ''
		Once you get the password from the Select App section > Generate make sure you paste it into auth_password, once you close the window in gmail you won't be able to view your password again
4.)Go to prometheus UI and make sure an alert is firing as well as going to alertmanager UI and make sure the alert shows up there
5.)Then go to your 'from' email and make sure that the alert has been sent to your 'to' email

*****ACCESSING ALERT MANAGER VIA WEB*****
localhost:9093 (Default port number)

*****ACCESSING PROMETHEUS VIA WEB*****
localhost:9090		(The port numbers may change depending on what you specified in your configuration file I think)



*****ACCESSING GRAFANA VIA WEB*****
localhost:3000
*****ACCESSING LOKI VIA WEB*****
http://localhost:3100/metrics		(The port numbers may change depending on what you specified in your configuration file I think)
*****ACCESSING PROMTAIL VIA WEB*****
localhost:9080		(The port numbers may change depending on what you specified in your configuration file I think)
*****ACCESSING PROMETHEUS VIA WEB*****
localhost:9090		(The port numbers may change depending on what you specified in your configuration file I think)
*****ACCESSING WINDOWS EXPORTER VIA WEB*****
localhost:9182 and localhost:9182/metrics
*****ACCESSING ALERT MANAGER VIA WEB*****
localhost:9093 (Default port number)
