*****WHAT IS SPRING BOOT?*****
Spring Framework Features:
POJO
Dependency Injection
MVC
REST
Security
Batch
Data
AOP
....

Spring Framework can integrate with other frameworks as well:
	Hibernate
	Struts
	
-Spring Boot is not a replacement for Spring Framework because you are still working
with Spring Framework
-Working with just Spring Framework you need to do a lot of configuration and it can
be a bit tricky
-Spring Boot takes care of a lot of configuration for you
-Developer ---> Spring Boot ---> Spring Framework
-Spring Boot acts as a middleman to help you work with the Spring Framework
-Spring Boot gives you Dependency(JAR files) and configuration that you would 
otherwise have to do yourself
-Main idea of Spring Boot is to give you a production ready application
-The moment you create a Spring Boot project you don't have to do any configuration,
it is runnable and you can deploy it on the server
-Spring Boot provides you an embedded server, which means the application JAR file
which you'll create has an embedded server(Tomcat) inside it
-If you want to make any configuration changes they must be done in the 
'application.properties' file
-beans - object managed by Spring
-beans get injected into the class that requires them


*****DEPENDENCY INJECTION*****
-Dependency Injection is a design pattern
-Objects depend on other objects
-You want this dependency to be 'loose coupling'
-Example:
	-Laptop has components(Hardrive, RAM, Screen, etc..)
	-Laptop is dependent on these objects
	-But you want to be able to switch out your Hardrive down the line if you want
	 or loose coupling of objects
-Loose coupling can be achieved by having 'Spring IOC Conatiner' create 
the objects we are dependent on(dependency)
-We want to inject the dependency(object) inside the class that needs it, which
will be done by Spring IOC Container
-Spring will initialize and collect all of its beans and will store them into the Spring Container
-Whenever you want the object --> you just bring it out of the container
-Use @Component(above the class) on the object dependency
	This will automatically instantiate your object (create and store your object in the container) when you start your application
	Evidence that an object is automatically created and stored is that you can write a constructor with an output message
	and when you start your app you will see the output message, without you having to even create an object
-Use @AutoWired(above the object) in the class that we need the dependency
	When you want to use an object just put this annotation above declaration of object, it will then be available for use
	This will connect you with the object
-This concept achieves loose coupling as well as another factor, testing
-We should always test each component and this will allow us to test without
effecting one another
-At its core dependency injection:
	Centralizes the creation of concrete objects that your code(client) uses
	Benefits from this include:
		easily switching out the implementation
		easily test the implementation
		able to wrap/manipulate how you want it to instantiate:
			this can be wrapping authentication around it
			adding pre/post processing
			auditing/logging

*****Spring Boot Startup Steps*****
-SpringApplication.run(NameOfClass.class, args);
	This line:
	Creates your Spring Container
		Where your beans are stored
	Sets up default configuration
	Starts Spring application context
		Spring is a container for all your code that runs on your application server(Tomcat in our case)
		model, controller, services, dao, etc... Spring acts as a container for all these
		This container is what's called an application context
		Every Spring application has this application context which runs when the Spring application runs
	Performs class path scan
		Finds all annotations and registers them
		The way to plug in code into Spring Boot is by creating custom classes and annotating them with proper annotations
		Model class annotated with @Component, Controller class annotated with @RestController if you're using REST api(can also use @Controller)
		Service class annotated with @Service, etc...
		You will learn later on which annotations go where and what purpose they serve
		Annotations serve to mark your classes
		Spring looks at these classes and depending on the marker treats them differently
		If it sees a @RestController annotation it treats it as a controller, etc
		In order to find the classes that you've marked it performs a class path scan which identifies all the different classes you've annotated
		Important note: These classes will only be scanned if they're in the same package as the main class
	Starts Tomcat server
		Tomcat server comes embedded with Spring Boot

*****Controller*****
-Accepts requests
-Returns response
-Maps request to a repsonse
-Return type of response gets converted to JSON
-A Java Class
-Marked with annotations
-Has info about:
	What URL access triggers it
	What method to run when accessed
-Methods mapped to URL requests

*****pom.xml*****
-This is discussing the simple setup of pom.xml
-Dependencies we've added so far:
	spring-boot-starter-test
	spring-boot-starter-web
	spring-boot-devtools
	lombok
-In our pom.xml file we have two tags we want to focus on:
	<parent></parent>
		Tells maven which version of the dependency to download
	<dependencies></dependencies>
		Tells maven what dependency to download

*****application.properties*****
-Customizing Spring Boot
-This file allows you to make changes to Spring Boot:
	Change server port
	Connect to a database(add dependency in pom.xml also)
	
*****HTTP Methods*****
HTTP Methods:
GET
POST
PUT
DELETE

Create ---> C	POST
Read ---> 	R	GET
Update ---> U	PUT
Delete ---> D	DELETE

*****Live Reload*****
-Dev tools allows for live reload
	-File > Settings > Build, Execution, Deployment(Click on drop down menu) > Compiler > Check mark box next to "Build project automatically" > Apply > Ok
	-File > Settings > Advanced Settings > Check mark box next to "Allow auto-make to start even if developed application is currently running" > Apply > Ok

*****Passing a parameter*****
-If you want to pass a parameter in the HTTP request you can do so
-Add @PathVariable as a method argument to the method that maps to that request
	For example:
	request -> localhost:8080/user/getUser/parameterGoesHere
	@GetMapping("getUser/"{userId}")
	public User getUserbyId(@PathVariable("userId") int uId)
-Remember to add {} in @GetMapping
-Parameter name in @GetMapping must be the same as @PathVariable
	Can also be same as parameter name after @PathVariable but not required

*****Passing data using @RequestBody*****
-You can pass values using a parameters from the request(as seen above) but if you're passing a lot of parameters it can become cumbersome
-If we want to register a new user we would have to pass all the data that makes up a user(userId, email, password)
-Instead we can use @RequestBody
-This allows you to pass the data through Postman and keeps your request(URL) clutter free
-Add @RequestBody as a method argument to the method that maps to that request
-Then pass in the object you want to give data for
	For example:
	request -> localhost:8080/user/registerUser
	@PostMapping("/registerUser")
	public User registerUser(@RequestBody User user)

*****DI / IOC*****
-Dependency Injection and Inversion of Control
-Dependency Injection occurs when the Spring Container creates an object and passes it to you
-Two ways to create a bean:
	1.) Spring creates one for you if you specify with certain annotations
		Add @Component annotation in any class that you want an object of(add above class name)
		Add @AutoWired annotation in any class when you want to call/use an object(add above object declaration)
		In order for Spring to create a bean for you you must use these 2 annotations:
			@Component
			@AutoWired
	2.) You explicitly create one
		When creating your own beans you should do so in a separate package called config(package name doesn't matter)
		Create a class in that package called AppConfig(class name doesn't matter)
		Add @Configuration annotation in you AppConfig class(add above class name)
		Add @Bean annotation above a method that creates an object
		@Configuration
			public class AppConfig {
				@Bean
				public User getUserInstance(){
					return new User();
				}
			}
			Now you have your bean created(this is comparable to @Component)
			Notice how we are creating a user bean in the class AppConfig, you can create all different kinds of beans here
		Add @AutoWired annotation in any class when you want to call/use an object(add above object declaration)
		In order to explicitly create your own bean you must use these 3 annotations:
			@Configuration - annotates a class as a configuration class
			@Bean - used to create a bean
			@AutoWired - scans the container and auto injects the bean if it is available, if not available you get error
				There's a way to get around the error if bean is not available
				@AutoWired(required = false)
				This allows you to bypass the error message even if your bean isn't available
*****@SpringBootApplication*****
-Very important annotation, if you remove this nothing will work
-Does 3 things:
	Triggers auto-configuration
	Scans the classes within the package and child packages
	Creates the bean
-If you want it to scan other packages write it like this @SpringBootApplication(scanBasePackages = packagename)
	If you do this though, it will only scan this package and not the package where your main class is located

*****Stereotypes annotation*****
-Markers for any class that fulfills a role within an application
-Automatically creates a bean
-@Component		-scans and creates beans
-@Controller		-controller returns VIEWS
-@RestController	-rest controller returns JSON
-@Service		-service layer
-@Repository		-DAO

*****Connecting your Java app to a db*****

*****What is JPA*****
-Note: You must first add a db dependency before you can perform CRUD operations on db
-Java Persistence API
	Lets you do ORM(Object-Relational Mapping) when connecting to a relational db
-ORM
	Allows you to map your Model classes into SQL tables
		When you connect to db you provide some metadata on your Model classes
	You don't have to do query and then mapping by yourself, ORM takes care of it
-JPA is a way for you to use ORM
-Adding JPA dependency to your pom.xml file will allow you to communicate with db
	You also have to import a db dependency so your app knows which db to connect with(PostgreSQL)
	
*****Mapping your Java app to db*****
-Note: You must first add a db dependency before you can perform CRUD operations on db
-Your Model classes will serve as a template to your tables
	For example: We have a User class in the Model package
	User contains userId, email, and password
-We want to create a user table that has userId, email, and password as columns
	Each object of user will serve as a row for our user table

*****Creating a table of your Model classes in db*****
-Add @Entity annotation in all Model classes(add above class name)
	JPA now knows to create a table of this class in the db
	It will create columns that map to the instance variables in that class
	
*****Adding Primary Key*****
-Add @Id annotation to the variable you want to serve as primary key
	Every table must contain a primary key

*****Connecting Service classes to db*****
-This will allow you to perform your CRUD operations

*****STARTING SPRING BOOT PROJECT*****
-While creating your Spring Boot project choose any dependencies that you may need
-For my 'firstspringbootproject' I used Spring Dev Tools, Spring Lombok, and Spring Web
-You will have a class created with the same name that you gave your project
but just with the word 'Application' after it
-As stated earlier it comes with an embedded server(tomcat) so you can run it right
out of the box, it won't do anything but it can be connected to the server
-Steps we took during our Spring Boot demo:
	1.) Wrote @RestController above class that is in controller package
			@RestController is responsible for accepting the request
	2.) Wrote @RequestMapping above methods which would be used to call web pages
			@RequestMapping if any requests come with port number you specified
			then the methods you specified will be returned
	