*****WHAT IS SPRING BOOT?*****
Spring Framework Features:
POJO
Dependency Injection
MVC
REST
Security
Batch
Data
AOP
....

Spring Framework can integrate with other frameworks as well:
	Hibernate
	Struts
	
-Spring Boot is not a replacement for Spring Framework because you are still working
with Spring Framework
-Working with just Spring Framework you need to do a lot of configuration and it can
be a bit tricky
-Spring Boot takes care of a lot of configuration for you
-Developer ---> Spring Boot ---> Spring Framework
-Spring Boot acts as a middleman to help you work with the Spring Framework
-Spring Boot gives you Dependency(JAR files) and configuration that you would 
otherwise have to do yourself
-Main idea of Spring Boot is to give you a production ready application
-The moment you create a Spring Boot project you don't have to do any configuration,
it is runnable and you can deploy it on the server
-Spring Boot provides you an embedded server, which means the application JAR file
which you'll create has an embedded server(Tomcat) inside it
-If you want to make any configuration changes they must be done in the 
'application.properties' file
-beans - object managed by Spring
-beans get injected into the class that requires them


*****DEPENDENCY INJECTION*****
-Dependency Injection is a design pattern
-Objects depend on other objects
-You want this dependency to be 'loose coupling'
-Example:
	-Laptop has components(Hardrive, RAM, Screen, etc..)
	-Laptop is dependent on these objects
	-But you want to be able to switch out your Hardrive down the line if you want
	 or loose coupling of objects
-Loose coupling can be achieved by having 'Spring IOC Conatiner' create 
the objects we are dependent on(dependency)
-We want to inject the dependency(object) inside the class that needs it, which
will be done by Spring IOC Container
-Spring will initialize and collect all of its beans and will store them into the Spring Container
-Whenever you want the object --> you just bring it out of the container
-Use @Component(above the class) on the object dependency
	This will automatically instantiate your object (create and store your object in the container) when you start your application
	Evidence that an object is automatically created and stored is that you can write a constructor with an output message
	and when you start your app you will see the output message, without you having to even create an object
-Use @AutoWired(above the object) in the class that we need the dependency
	When you want to use an object just put this annotation above declaration of object, it will then be available for use
	This will connect you with the object
-This concept achieves loose coupling as well as another factor, testing
-We should always test each component and this will allow us to test without
effecting one another
-At its core dependency injection:
	Centralizes the creation of concrete objects that your code(client) uses
	Benefits from this include:
		easily switching out the implementation
		easily test the implementation
		able to wrap/manipulate how you want it to instantiate:
			this can be wrapping authentication around it
			adding pre/post processing
			auditing/logging

HTTP Methods:
GET
POST
PUT
DELETE

Create ---> C	POST
Read ---> 	R	GET
Update ---> U	PUT
Delete ---> D	DELETE

*****Spring Boot Startup Steps*****
-SpringApplication.run(NameOfClass.class, args);
	This line:
	Creates your Spring Container
		Where your beans are stored
	Sets up default configuration
	Starts Spring application context
		Spring is a container for all your code that runs on your application server(Tomcat in our case)
		model, controller, services, dao, etc... Spring acts as a container for all these
		This container is what's called an application context
		Every Spring application has this application context which runs when the Spring application runs
	Performs class path scan
		Finds all annotations and registers them
		The way to plug in code into Spring Boot is by creating custom classes and annotating them with proper annotations
		Model class annotated with @Component, Controller class annotated with @RestController if you're using REST api(can also use @Controller)
		Service class annotated with @Service, etc...
		You will learn later on which annotations go where and what purpose they serve
		Annotations serve to mark your classes
		Spring looks at these classes and depending on the marker treats them differently
		If it sees a @RestController annoation it treats it as a controller, etc
		In order to find the classes that you've marked it performs a class path scan which identifies all the different classes you've annotated
		Important note: These classes will only be scanned if they're in the same package as the main class
	Starts Tomcat server
		Tomcat server comes embedded with Spring Boot

*****Controller*****
-Accepts requests
-Returns response
-Maps request to a repsonse
-A Java Class
-Marked with annotations
-Has info about:
	What URL access triggers it
	What method to run when accessed
-Methods map to URL requests

*****STARTING SPRING BOOT PROJECT*****
-While creating your Spring Boot project choose any dependencies that you may need
-For my 'firstspringbootproject' I used Spring Dev Tools, Spring Lombok, and Spring Web
-You will have a class created with the same name that you gave your project
but just with the word 'Application' after it
-As stated earlier it comes with an embedded server(tomcat) so you can run it right
out of the box, it won't do anything but it can be connected to the server
-Steps we took during our Spring Boot demo:
	1.) Wrote @RestController above class that is in controller package
			@RestController is responsible for accepting the request
	2.) Wrote @RequestMapping above methods which would be used to call web pages
			@RequestMapping if any requests come with port number you specified
			then the methods you specified will be returned
	