*****STARTING SPRING BOOT PROJECT*****
-While creating your Spring Boot project choose any dependencies that you may need
-For my 'firstspringbootproject' I used Spring Dev Tools, Spring Lombok, and Spring Web
-You will have a class created with the same name that you gave your project
but just with the word 'Application' after it
-As stated earlier it comes with an embedded server(tomcat) so you can run it right
out of the box, it won't do anything but it can be connected to the server
-Steps we took during our Spring Boot demo:
	1.) Wrote @RestController above class that is in the controller package
			@RestController is responsible for accepting the request
	2.) Wrote @RequestMapping above methods which would be used to call web pages
			@RequestMapping if any requests come with port number you specified
			then the methods you specified will be returned

Two types of apps:
1.) To be consumed by end user - End user needs HTML
2.) To be consumed by another app - Data will be sent in the form of JSON to the other app

HTTP methods:
GET - 		get a record			@GetMapping	
POST - 		insert or create		@PostMapping
PUT - 		update a record			@PutMapping
DELETE - 	delete a record			@DeleteMapping
We want to create an app that gives another app these above options

Request ---> Controller ---> DAO ---> Database
Request comes to controller and from there it goes to DAO layer and DAO layer will call DB

Example:
	localhost:8084/product			GET all products
	localhost:8084/product/123		GET a single product Client app can retrieve a single product with specified productId
	localhost:8084/product/Lakme	GET all products matching the productName  Client app can retrieve all products matching productName

@PathVariable - allows you to take parameters in your method which allows you to pass a parameter in the URL
Example:
	@GetMapping("{pId}")
	public Product getProduct(@PathVariable("pId") int productId) {
		Product product = new Product(1, "Lakme", 99, 100);
		return product;
	}
	
Postman
-A tool to test Rest web services
-When we try to run our @GetMapping commands in the browser they run fine
but the browser can't run @PostMapping, @PutMapping, or @DeleteMapping
so we have to use Postman for those

Saving a Product
@RequestBody - allows you to pass your product/object in the body of Postman
Remember to click 'raw' then paste your object and switch to JSON format

Dependency Injection
bean - an object managed by Spring
-Two ways to create a bean:
	1.) Spring can create if you specify by certain annotations, few are stereotype annotations
			@Component in dependency class(above class name)
			@Autowired in class where object is needed(above object decleration)
	2.) We can create explicitly by @bean annotation
			@Bean in dependency class(above a method that returns dependency object)
				used to create a bean in Spring
			@Configuration in configuration class(above class name), in same location where you write @Bean
				annotates a class as a configuration class
			@Autowired in class where object is needed(above object decleration)
				scans the container and auto injects the bean if available
				if unavailable then throws error message
					you can bypass this by writing @Autowired(required = false)
					even if the bean is unavailable it won't give you an error, unless you try using it
					
@SpringBootApplication - Does the following:
1.) Scans the package and children package and creates the bean if you've instructed it to do so
		In our project it scans com.revature.pms
		Our child packages are .config, .controller, .dao, .exception, .model, .services, .util
		Our Client is PmsSpringBootApplication class which our main application file
		If you want to scan other packages include scanBasePackages = ("name of package you want to scan") after @SpringBootApplication(which is in you main application file)
		If you do the above though com.revature.pms won't get scanned
		By default the package with the @SpringBootApplication annotation will be scanned but if you specify another package then the default ones won't be scanned
		If you want the default package 
2.) Auto-configuration is done

Stereotype annotation - all these annoations will give you bean
	@Component		-scan and create a bean automatically(you won't have to use @Bean annotation
	@Controller		-returns VIEWS data
	@RestController -returns JSON data
	@Service		-service layer
	@Repository		-DAO layer
	
	
Spring Boot JPA - Java Persistence API
Hibernate
	-Framework ORM (Object Relationship Mapping)
Use of Spring JPA is to work with DB
1.) Create Product table - not required, automatically will create one by using JPARepository or CrudRepository
	provides lots of methods like save,update,delete, etc...
Configuring JPA:
1.) Update pom.xml with jpa dependency and also postgres dependency
These are the dependencies for jpa and postgres (VERSIONS CAN CHANGE DEPENDING ON WHICH YOU'RE USING)
<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
			<version>2.6.7</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.3.5</version>
		</dependency>
2.) Configure database properties in application.properties file
server.port=8084

spring.datasource.driver-class-name=org.postgresql.Driver //(THIS DEPENDS ON THE DRIVER YOU'RE USING)
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres //(THIS DEPENDS ON THE DATABASE YOU'RE CONNECTING TO)
spring.datasource.username=postgres //(THIS DEPENDS ON THE USERNAME YOU'RE USING IN YOUR DATABASE)
spring.datasource.password=root (THIS DEPENDS ON THE PASSWORD YOU'RE USING IN YOUR DATABASE)

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.formate_sql=true
spring.jackson.serialization.fail_on_empty_beans=false
spring.jpa.show-sql=true

3.) Create the table
Some JPA annotations
@Entity
@Table
@Id
@Column

JPARepository and CrudRepository
-Interface which has methods to perform CRUD operations(Create, Read, Update, Delete)