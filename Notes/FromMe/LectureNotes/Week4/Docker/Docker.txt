*****DOCKER COMMANDS*****
docker images
	Shows you how many images you have
docker ps
	Shows you how many containers(processes) you have running
docker ps -a
	Shows all the containers(processes)
docker pull 'imagename'
	Will pull the specified image but won't run it
docker run 'imagename'
	Runs image as a container
	If you don't have image on your local system it will download it and run the container all with this one command
	It will give the container a random name if not specified
	You can check this in your docker desktop app
	Example:
		docker run nginx
docker run --name 'nameofcontaineryouwant' -p 8080:80 'imagename'
	--name specifies the name of a container and prevent docker from giving it a random name
	-p specifies the port, the first is the local port and the second is the image port
	Example:
		docker run --name nginxcontainer -p 8080:80 nginx
		To check to see if this is running go to your browser and type 'localhost:8080'
docker stop 'containername'
	Stops running the specified container
docker rm 'containername'
	Removes specified container
docker image rm 'imagename'
	Removes specified docker image
	Can only remove an image if a container is not running it

*****WORKING WITH POSTGRES IN DOCKER*****
docker run --name zopostgres -e POSTGRES_USER=zo -e POSTGRES_PASSWORD=zohair -p 5433:5432 -d postgres
	-e specifies username for postgres
	-e specifies password for postgres
	-p specifies the port numbers
		the first one is the one we want to expose, don't use a port that's already being used(in our case 5432 for projectone)
		second one is the underlying port for postgres which default is 5432 
	-d specifies which database to use
Now go to dbeaver and create a new postgreSQL connection and give it the appropriate username, password, and portnumber that you specified above
	Note: --name will specify the container name in docker not in dbeaver, so even though we called our container zopostgres in dbeaver it might show up as postgres2 or something
	
*****HOW TO DOCKERIZE YOUR APPLICATION*****
You will create an image and then run that image inside a container
Will need the help of Maven
	Generate the JAR file
Maven Lifecycle:
	Validate
	Compile
	Test
	Package				-will generate JAR file inside target folder
	Integration test
	Verify
	Install
	Deploy
To use maven package you must run command 'mvn package'
	NOTE: Because we downloaded maven locally(in addition to the one in intelliJ) when we run this command it won't work because there's an issue with linking local maven with JDK8
	This will complete all the phases up to and including package(DOES IT THOUGH)(Validate,Compile,Test, and Package)
	You must run this command in the same place where you have pom.xml
	If you want to run the other commands just type 'mvn test' or whichever one you want to run
Create a new SpringBoot Project
	Add devtools, web, and lombok dependencies
Create a class that accepts HTTP requests
	Good practice to create a controller package and inside that the controller class
	Controller class had one method that printed "Hello, this is a docker demo"
	Method was public String
1.) Generate a JAR file
		Click on maven on the right side of intelliJ
		Click on LifeCycle
		Right click package and select Run Maven Build
		Your JAR file will now be in the target folder
		You will notice that the default name for the JAR file will be the artifactId followed by the version(can be seen in your pom.xml file)
		If you want to change this then just go to pom.xml and AFTER </plugins> and BEFORE </build> add <finalName>namethatyouwant</finalName>
2.) Create image of application(dockerize it)
		Create dockerfile
			Text document that contains all the commands a user could call on the command line to assemble an image
			This needs to be in your root folder, so right click on the project name > new > File > Dockerfile
		This file will specify the steps that you want docker to follow
		Inside this file write:
			FROM openjdk:8
			EXPOSE 8080
			ADD target/nameofjarfile.jar aliasname.jar
			ENTRYPOINT ["java", "-jar", "/aliasname.jar"]
				 
		In terminal inside IntelliJ we will give commands to create an image and run the image in a container(make sure you're in the root folder)
			Build the image:
				docker build -t name-of-image-that-you-want .
					This creates an image of your app
					. specifies where you want to create the image so the . says create it in the current directory
			Run the image in a container:
				docker run --name 'nameofcontainer' -p 8080:8080 'imagename'
					Note: 'imagename' is the one you specified when you ran the build command
*****DOCKER COMPOSE*****
